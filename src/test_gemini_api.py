"""
Test script for Gemini API connectivity and model availability
"""


import os
import sys

# Load environment variables from .env automatically
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è  python-dotenv ch∆∞a ƒë∆∞·ª£c c√†i. ƒê·ªÉ t·ª± ƒë·ªông load .env, h√£y ch·∫°y: pip install python-dotenv")

try:
    import google.generativeai as genai
except ImportError:
    print("‚ùå google-generativeai library not installed. Please install with: pip install google-generativeai")
    sys.exit(1)

def main():
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå GEMINI_API_KEY not found in environment variables.")
        print("Set your API key before running this script.")
        print("Example (cmd): set GEMINI_API_KEY=your_api_key_here")
        return
    try:
        genai.configure(api_key=api_key)
        print("‚úÖ Gemini API key loaded.")
        print("üîç Listing available Gemini models...")
        models = genai.list_models()
        available_models = []
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                print(f"   ‚úÖ {model.name}")
        if not available_models:
            print("‚ùå No compatible models found.")
            return
        # Test with specific model: gemini-2.5-flash
        test_model = "gemini-2.5-flash"
        print(f"\nü§ñ Testing content generation with model: {test_model}")
        
        try:
            client = genai.GenerativeModel(test_model)
        except Exception as e:
            print(f"‚ùå Failed to initialize {test_model}, using first available model")
            model_name = available_models[0].replace('models/', '')
            client = genai.GenerativeModel(model_name)
            test_model = model_name
        
        # Test prompt from llm_agent.py
        prompt = """B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch th·ªã tr∆∞·ªùng vi·ªác l√†m c√¥ng ngh·ªá. 
Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch c√°c nh√≥m k·ªπ nƒÉng/c√¥ng ngh·ªá v√† ƒë∆∞a ra nh·ªØng nh·∫≠n ƒë·ªãnh s√¢u s·∫Øc v·ªÅ xu h∆∞·ªõng th·ªã tr∆∞·ªùng.

D·ªØ li·ªáu ƒë·∫ßu v√†o - C√°c nh√≥m k·ªπ nƒÉng/c√¥ng ngh·ªá:

Nh√≥m 6: react, frontend, frontend react, build
Nh√≥m 1: engineer, developer, cloud, development, application, design, microservices, scalable
Nh√≥m 2: skill, backend, kubernetes, deployment, learning data
Nh√≥m 10: data, required, scripting, deep learning, knowledge, pytorch       
Nh√≥m 9: python, python scripting, docker, panda, year
Nh√≥m 7: network
Nh√≥m 4: preferred, certification, rest, sql
Nh√≥m 3: tensorflow, testing, javascripttypescript, computing, looking, deep, model, tensorflow pytorch
Nh√≥m 5: learning, must, senior, apis, scikitlearn
Nh√≥m 8: rest apis

B·ªëi c·∫£nh b·ªï sung: Ph√¢n t√≠ch lo·∫°i: trend_analysis

H√£y ph√¢n t√≠ch v√† nh√≥m l·∫°i c√°c k·ªπ nƒÉng theo c√°c ti√™u ch√≠ sau:

1. **Theo lƒ©nh v·ª±c**: Frontend, Backend, Data Science, DevOps, AI/ML, Mobile, etc.
2. **Theo m·ª©c ƒë·ªô**: Entry-level, Mid-level, Senior-level, Expert-level
3. **Theo xu h∆∞·ªõng**: Hot skills, Stable skills, Declining skills
4. **Theo m·ªëi quan h·ªá**: K·ªπ nƒÉng b·ªï tr·ª£ cho nhau, k·ªπ nƒÉng thay th·∫ø

Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi format:
{
    "summary": "T√≥m t·∫Øt v·ªÅ c√°ch nh√≥m k·ªπ nƒÉng",
    "by_domain": {"Frontend": [], "Backend": [], ...},
    "by_level": {"Entry": [], "Mid": [], "Senior": [], "Expert": []},
    "by_trend": {"Hot": [], "Stable": [], "Declining": []},
    "skill_relationships": {"complementary": [], "alternatives": []},
    "confidence_score": 0.9
}

L∆∞u √Ω: Ch·ªâ tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng c√≥ text b·ªï sung."""
        
        print(f"üì§ Sending prompt to {test_model}...")
        response = client.generate_content(prompt)
        if hasattr(response, 'text') and response.text:
            print("\nüì• Gemini API response:")
            print(response.text)
        else:
            print("‚ùå No response text received from Gemini API.")
    except Exception as e:
        print(f"‚ùå Error during Gemini API test: {e}")

if __name__ == "__main__":
    main()
